{"version":3,"sources":["webpack://GMaps/webpack/bootstrap","webpack://GMaps/./lib/polyfills.js","webpack://GMaps/./lib/core.js","webpack://GMaps/./lib/events.js","webpack://GMaps/./lib/controls.js","webpack://GMaps/./lib/geofences.js","webpack://GMaps/./lib/markers.js","webpack://GMaps/./lib/overlays.js","webpack://GMaps/./lib/geometry.js","webpack://GMaps/./lib/layers.js","webpack://GMaps/./lib/routes.js","webpack://GMaps/./lib/static.js","webpack://GMaps/./lib/map_types.js","webpack://GMaps/./lib/styles.js","webpack://GMaps/./lib/streetview.js","webpack://GMaps/./lib/utils.js","webpack://GMaps/./lib/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_typeof","window","google","maps","Polygon","getBounds","path","bounds","LatLngBounds","paths","this","getPaths","getLength","getAt","extend","containsLatLng","latLng","contains","inPoly","numPaths","numPoints","j","vertex1","vertex2","lng","lat","Circle","geometry","spherical","computeDistanceBetween","getCenter","getRadius","Rectangle","Marker","setFences","fences","addFence","fence","push","getId","Array","indexOf","searchElement","TypeError","len","length","arguments","Number","Infinity","Math","floor","abs","k","max","latLngFromArguments","undefined","LatLng","flattenArray","array","reduce","collection","item","concat","arrayToLatLng","coordinates","useGeoJSON","map","coordinate","firstCoordinate","secondCoordinate","coordsToLatLngs","getElementById","id","context","sanitizedId","replace","$","document","getElement","selectorOrElement","match","className","sanitizedClassName","getElementsByClassName","setupEventListener","_ref","eventName","instance","handler","event","addListener","hideContextMenu","setupEvents","_ref2","events","handlers","forEach","MAP_EVENTS","GMAPS_MENU_ID","GMaps","_this","baseOptions","_classCallCheck","Error","div","_baseOptions$el","el","_baseOptions$element","element","_baseOptions$latitude","latitude","_baseOptions$longitud","longitude","_baseOptions$center","center","_baseOptions$zoom","zoom","_baseOptions$mapType","mapType","_baseOptions$zoomCont","zoomControlOpt","style","position","_baseOptions$panContr","panControl","_baseOptions$zoomCont2","zoomControl","_baseOptions$mapTypeC","mapTypeControl","_baseOptions$scaleCon","scaleControl","_baseOptions$streetVi","streetViewControl","_baseOptions$overview","overviewMapControl","width","height","markerClusterer","enableNewStyle","options","_objectWithoutProperties","mapBaseOptions","mapTypeId","MapTypeId","toUpperCase","mapControlsOptions","zoomControlOptions","ZoomControlStyle","ControlPosition","filteredOptions","keys","hash","includes","_objectSpread","_defineProperty","ceil","random","Date","now","contextMenus","visualRefresh","scrollWidth","offsetWidth","scrollHeight","offsetHeight","mapOptions","Map","controls","overlays","layers","singleLayers","markers","polylines","routes","polygons","infoWindow","overlayElement","registeredEvents","apply","rightclick","buildContextMenu","control","_this2","contextMenuElement","html","title","join","innerHTML","_toConsumableArray","getElementsByTagName","contextMenuItem","clearListeners","addDomListenerOnce","contextMenuItemListenerEvent","preventDefault","target","action","left","top","getBoundingClientRect","rectangle","x","scrollX","pageXOffset","y","scrollY","pageYOffset","offsetParent","iterator","offsetLeft","offsetTop","findAbsolutePosition","pixel","_this3","overlay","OverlayView","setMap","draw","projection","getProjection","marker","getPosition","fromLatLngToContainerPixel","buildContextMenuHTML","setTimeout","display","_this4","option","createElement","minWidth","background","listStyle","padding","boxShadow","body","appendChild","addDomListener","relatedTarget","trigger","latLngs","fitBounds","filter","visible","fitLatLngBounds","_len","args","_key","callback","slice","pop","panTo","magnitude","getZoom","setZoom","methodName","_len2","_key2","customEvents","on","registeredEvent","off","once","addListenerOnce","fire","eventArguments","addControl","_ref$style","classes","content","_ref$events","disableDefaultStyles","cursor","fontFamily","fontSize","borderRadius","setProperty","HTMLElement","index","createControl","removeControl","controlIndex","splice","controlsForPosition","controlIndexInCollection","removeAt","checkGeofence","lagLng","checkMarkerGeofence","outsideCallback","INFO_WINDOW_EVENTS","MARKER_EVENTS","MARKER_MOUSE_EVENTS","createMarker","self","details","outside","markers_objectWithoutProperties","markerOptions","markers_objectSpread","InfoWindow","fromLatLngToPoint","click","hideInfoWindows","open","addMarker","gm_accessors_","_options$latitude","_options$longitude","addMarkers","close","removeMarker","_options$fireEvent","fireEvent","markerIndex","removeMarkers","STOP_PROPAGATION_EVENTS","drawOverlay","_baseOptions$autoShow","autoShow","_baseOptions$position","_baseOptions$layer","layer","_baseOptions$horizont","horizontalOffset","_baseOptions$vertical","verticalOffset","verticalAlign","horizontalAlign","overlays_objectWithoutProperties","onAdd","borderStyle","borderWidth","zIndex","panes","getPanes","navigator","userAgent","toLowerCase","all","cancelBubble","returnValue","stopPropagation","overlayMouseTarget","fromLatLngToDivPixel","children","contentHeight","clientHeight","contentWidth","clientWidth","show","onRemove","remove","parentNode","removeChild","removeOverlay","overlayIndex","removeOverlays","EVENTS","drawPolyline","icons","strokeColor","strokeOpacity","strokeWeight","geodesic","_baseOptions$clickabl","clickable","_baseOptions$editable","editable","_baseOptions$visible","geometry_objectWithoutProperties","geometry_toConsumableArray","polylineOptions","geometry_objectSpread","polyline","Polyline","removePolyline","polylineIndex","removePolylines","drawCircle","_options$center","polygonOptions","polygon","drawRectangle","drawPolygon","_baseOptions$useGeoJS","basePaths","removePolygon","polygonIndex","removePolygons","getFromFusionTables","_baseOptions$events","layers_objectWithoutProperties","FusionTablesLayer","loadFromFusionTables","getFromKML","url","KmlLayer","loadFromKML","addLayer","layerName","search","nearbySearch","radarSearch","textSearch","keyword","location","radius","rankBy","types","query","TrafficLayer","traffic","TransitLayer","transit","BicyclingLayer","bicycling","places","PlacesService","placeSearchRequest","textSearchRequest","setOptions","removeLayer","layerIndex","getRoutes","origin","destination","_baseOptions$travelMo","travelMode","_baseOptions$unitSyst","unitSystem","_baseOptions$avoidHig","avoidHighways","_baseOptions$avoidTol","avoidTolls","_baseOptions$optimize","optimizeWaypoints","_baseOptions$waypoint","waypoints","error","requestOptions","routes_objectSpread","routes_objectWithoutProperties","TravelMode","routes_toConsumableArray","DirectionsService","route","result","status","DirectionsStatus","OK","removeRoutes","getElevations","_baseOptions$path","_baseOptions$samples","samples","locations","service","ElevationService","getElevationAlongPath","getElevationForLocations","cleanRoute","renderRoute","baseRenderOptions","panel","renderOptions","DirectionsRenderer","_","response","setDirections","drawRoute","lastRoute","overview_path","travelRoute","start","step","legs","steps","step_number","stepNumber","end","drawSteppedRoute","routeStep","stepsCount","Route","routes_classCallCheck","step_count","steps_length","MVCArray","getPath","parseColor","color","opacity","parsedColor","min","parseFloat","toString","toImage","_options$size","size","_options$zoom","staticMapOptions","encoding","encodePath","staticMapURL","address","_baseOptions$markers","styles","_baseOptions$size","static_objectWithoutProperties","defaultRoot","protocol","root","parameters","encodeURI","styleParameters","featureType","elementType","stylers","styler","buildStyleParameters","markerParameters","_marker$latitude","_marker$longitude","icon","label","buildMarkerParameters","polylineParameters","parseInt","fillColor","fillOpacity","buildPathParameters","dpi","devicePixelRatio","addMapType","getTileUrl","_options$tileSize","tileSize","Size","ImageMapType","mapTypes","set","addOverlayMapType","getTile","_options$index","overlayMapTypes","overlayMapTypeOptions","map_types_objectWithoutProperties","insertAt","map_types_objectSpread","removeOverlayMapType","overlayMapType","addStyle","styledMapType","StyledMapType","styledMapName","setStyle","setMapTypeId","STREETVIEW_EVENTS","createPanorama","_baseOptions$lat","_baseOptions$lng","streetViewOptions","streetview_objectSpread","streetview_objectWithoutProperties","panorama","setStreetView","_baseOptions$latitude2","_baseOptions$longitud2","_baseOptions$instance","containerElement","streetview_defineProperty","StreetViewPanorama","geolocate","completeCallback","always","complete","geolocation","getCurrentPosition","success","not_supported","geocode","_baseOptions$location","utils_objectWithoutProperties","geocoder","Geocoder","geocodeOptions","utils_objectSpread"],"mappings":"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","file":"gmaps.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/* eslint-disable */\nif (typeof window.google === 'object' && window.google.maps) {\n  //==========================\n  // Polygon containsLatLng\n  // https://github.com/tparkin/Google-Maps-Point-in-Polygon\n  // Poygon getBounds extension - google-maps-extensions\n  // http://code.google.com/p/google-maps-extensions/source/browse/google.maps.Polygon.getBounds.js\n  if (!google.maps.Polygon.prototype.getBounds) {\n    google.maps.Polygon.prototype.getBounds = function() {\n      var bounds = new google.maps.LatLngBounds();\n      var paths = this.getPaths();\n      var path;\n\n      for (var p = 0; p < paths.getLength(); p++) {\n        path = paths.getAt(p);\n        for (var i = 0; i < path.getLength(); i++) {\n          bounds.extend(path.getAt(i));\n        }\n      }\n\n      return bounds;\n    };\n  }\n\n  if (!google.maps.Polygon.prototype.containsLatLng) {\n    // Polygon containsLatLng - method to determine if a latLng is within a polygon\n    google.maps.Polygon.prototype.containsLatLng = function(latLng) {\n      // Exclude points outside of bounds as there is no way they are in the poly\n      var bounds = this.getBounds();\n\n      if (bounds !== null && !bounds.contains(latLng)) {\n        return false;\n      }\n\n      // Raycast point in polygon method\n      var inPoly = false;\n\n      var numPaths = this.getPaths().getLength();\n      for (var p = 0; p < numPaths; p++) {\n        var path = this.getPaths().getAt(p);\n        var numPoints = path.getLength();\n        var j = numPoints - 1;\n\n        for (var i = 0; i < numPoints; i++) {\n          var vertex1 = path.getAt(i);\n          var vertex2 = path.getAt(j);\n\n          if (vertex1.lng() < latLng.lng() && vertex2.lng() >= latLng.lng() || vertex2.lng() < latLng.lng() && vertex1.lng() >= latLng.lng()) {\n            if (vertex1.lat() + (latLng.lng() - vertex1.lng()) / (vertex2.lng() - vertex1.lng()) * (vertex2.lat() - vertex1.lat()) < latLng.lat()) {\n              inPoly = !inPoly;\n            }\n          }\n\n          j = i;\n        }\n      }\n\n      return inPoly;\n    };\n  }\n\n  if (!google.maps.Circle.prototype.containsLatLng) {\n    google.maps.Circle.prototype.containsLatLng = function(latLng) {\n      if (google.maps.geometry) {\n        return google.maps.geometry.spherical.computeDistanceBetween(this.getCenter(), latLng) <= this.getRadius();\n      }\n      else {\n        return true;\n      }\n    };\n  }\n\n  google.maps.Rectangle.prototype.containsLatLng = function(latLng) {\n    return this.getBounds().contains(latLng);\n  };\n\n  google.maps.LatLngBounds.prototype.containsLatLng = function(latLng) {\n    return this.contains(latLng);\n  };\n\n  google.maps.Marker.prototype.setFences = function(fences) {\n    this.fences = fences;\n  };\n\n  google.maps.Marker.prototype.addFence = function(fence) {\n    this.fences.push(fence);\n  };\n\n  google.maps.Marker.prototype.getId = function() {\n    return this['__gm_id'];\n  };\n}\n\n//==========================\n// Array indexOf\n// https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf\nif (!Array.prototype.indexOf) {\n  Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {\n      \"use strict\";\n      if (this == null) {\n          throw new TypeError();\n      }\n      var t = Object(this);\n      var len = t.length >>> 0;\n      if (len === 0) {\n          return -1;\n      }\n      var n = 0;\n      if (arguments.length > 1) {\n          n = Number(arguments[1]);\n          if (n != n) { // shortcut for verifying if it's NaN\n              n = 0;\n          } else if (n != 0 && n != Infinity && n != -Infinity) {\n              n = (n > 0 || -1) * Math.floor(Math.abs(n));\n          }\n      }\n      if (n >= len) {\n          return -1;\n      }\n      var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n      for (; k < len; k++) {\n          if (k in t && t[k] === searchElement) {\n              return k;\n          }\n      }\n      return -1;\n  }\n}","export const latLngFromArguments = (...args) => {\n  if (typeof args[0] === 'number' && typeof args[1] === 'number') {\n    return new google.maps.LatLng(args[0], args[1]);\n  }\n\n  return args[0];\n};\n\nexport const flattenArray = array =>\n  array.reduce((collection, item) => collection.concat(item), []);\n\nexport const coordsToLatLngs = (coordinates, useGeoJSON) => {\n  const firstCoordinate = useGeoJSON ? coordinates[1] : coordinates[0];\n  const secondCoordinate = useGeoJSON ? coordinates[0] : coordinates[1];\n\n  return new google.maps.LatLng(firstCoordinate, secondCoordinate);\n};\n\nexport const arrayToLatLng = (coordinates, useGeoJSON) =>\n  coordinates.map((coordinate) => {\n    if (!(coordinate instanceof google.maps.LatLng)) {\n      if (coordinate.length && typeof coordinate[0] === 'object') {\n        return arrayToLatLng(coordinate, useGeoJSON);\n      }\n\n      return coordsToLatLngs(coordinate, useGeoJSON);\n    }\n\n    return coordinate;\n  });\n\nconst getElementsByClassName = (className, context) => {\n  const sanitizedClassName = className.replace(/^\\./, '');\n\n  if (typeof window.$ === 'function') {\n    return $(`.${sanitizedClassName}`, context)[0];\n  }\n\n  return window.document.getElementsByClassName(sanitizedClassName)[0];\n};\n\nexport const getElementById = (id, context) => {\n  const sanitizedId = id.replace(/^#/, '');\n\n  if (typeof window.$ === 'function') {\n    const elements = $(`#${sanitizedId}`, context) || [];\n\n    return elements[0];\n  }\n\n  return window.document.getElementById(sanitizedId);\n};\n\nconst getElement = (selectorOrElement, context) => {\n  if (typeof selectorOrElement === 'string') {\n    return selectorOrElement.match(/^#/) ? getElementById(selectorOrElement, context) : getElementsByClassName(selectorOrElement, context);\n  }\n\n  return selectorOrElement;\n};\n\nexport const findAbsolutePosition = (element) => {\n  let left = 0;\n  let top = 0;\n\n  if (element.getBoundingClientRect) {\n    const rectangle = element.getBoundingClientRect();\n    const x = -(window.scrollX ? window.scrollX : window.pageXOffset);\n    const y = -(window.scrollY ? window.scrollY : window.pageYOffset);\n\n    return [rectangle.left - x, rectangle.top - y];\n  }\n\n  if (element.offsetParent) {\n    let iterator = element;\n\n    do {\n      left += iterator.offsetLeft;\n      top += iterator.offsetTop;\n    } while ((iterator = iterator.offsetParent));\n  }\n\n  return [left, top];\n};\n\nexport const setupEventListener = ({ object, eventName, instance, handler, }) => {\n  google.maps.event.addListener(object, eventName, (event = instance) => {\n    handler.call(instance, event);\n\n    if (instance.hideContextMenu) {\n      instance.hideContextMenu();\n    }\n  });\n};\n\nexport const setupEvents = ({ events, object, instance, handlers, }) =>\n  events.forEach((eventName) => {\n    if (handlers[eventName]) {\n      setupEventListener({\n        object,\n        eventName,\n        instance,\n        handler: handlers[eventName],\n      });\n    }\n  });\n\nconst MAP_EVENTS = [\n  'bounds_changed', 'center_changed', 'click', 'dblclick', 'drag',\n  'dragend', 'dragstart', 'idle', 'maptypeid_changed',\n  'mousemove', 'mouseout', 'mouseover', 'projection_changed',\n  'resize', 'tilesloaded', 'zoom_changed'\n];\nconst GMAPS_MENU_ID = 'gmaps_context_menu';\n\n/**\n * GMaps is a wrapper for Google Maps JavaScript API. Its goal is to simplify Google Maps usage by performing complex tasks with fewer lines of code.\n */\nclass GMaps {\n  /**\n   * Creates a new GMaps instance, including a Google Maps map.\n   * @param {object} options - `options` accepts all the [MapOptions](https://developers.google.com/maps/documentation/javascript/reference#MapOptions) and [events](https://developers.google.com/maps/documentation/javascript/reference#Map) listed in the Google Maps API. Also accepts:\n   * @param {number} options.latitude - Latitude of the map's center.\n   * @param {number} options.longitude - Longitude of the map's center.\n   * @param {google.maps.LatLng} options.center - A `google.maps.LatLng` coordinate indicate the center. If set, `latitude` and `longitude` are ignored.\n   * @param {string|HTMLElement} options.element - container where the map will be rendered.\n   * @param {function} options.markerClusterer - A function to create a marker cluster. You can use MarkerClusterer or MarkerClustererPlus.\n   */\n  constructor(baseOptions = {}) {\n    if (!window.google || !window.google.maps) {\n      throw new Error('Google Maps JavaScript API is required. Check: https://developers.google.com/maps/documentation/javascript/tutorial');\n    }\n\n    const { div,\n      el = div,\n      context,\n      element = getElement(el, context),\n      lat,\n      latitude = lat,\n      lng,\n      longitude = lng,\n      center = new google.maps.LatLng(latitude, longitude),\n      zoom = 15,\n      mapType = 'roadmap',\n      zoomControlOpt = {\n        style: 'DEFAULT',\n        position: 'TOP_LEFT',\n      },\n      panControl = true,\n      zoomControl = true,\n      mapTypeControl = true,\n      scaleControl = true,\n      streetViewControl = true,\n      overviewMapControl = true,\n      width,\n      height,\n      markerClusterer,\n      enableNewStyle,\n      ...options } = baseOptions;\n\n    const mapTypeId = google.maps.MapTypeId[mapType.toUpperCase()];\n\n    const mapBaseOptions = {\n      zoom,\n      center,\n      mapTypeId,\n    };\n\n    const mapControlsOptions = {\n      panControl,\n      zoomControl,\n      zoomControlOptions: {\n        style: google.maps.ZoomControlStyle[zoomControlOpt.style],\n        position: google.maps.ControlPosition[zoomControlOpt.position],\n      },\n      mapTypeControl,\n      scaleControl,\n      streetViewControl,\n      overviewMapControl,\n    };\n\n    const filteredOptions = Object.keys(options).reduce((hash, key) => {\n      if (MAP_EVENTS.includes(key)) {\n        return hash;\n      }\n\n      return { ...hash, [key]: options[key], };\n    }, {});\n\n    this.id = Math.ceil(Math.random() * Date.now());\n\n    GMaps.contextMenus[this.id] = {};\n\n    google.maps.visualRefresh = enableNewStyle;\n\n    /**\n     * HTML element where the Google Maps map is rendered\n     *\n     * @type {HTMLElement}\n     */\n    this.element = typeof element === 'string' ? getElement(element) : element;\n\n    if (!this.element) {\n      throw new Error('No element defined. Pass an `element` option in GMaps.');\n    }\n\n    this.element.style.width = width || this.element.scrollWidth || this.element.offsetWidth;\n    this.element.style.height = height || this.element.scrollHeight || this.element.offsetHeight;\n\n    const mapOptions = {\n      ...filteredOptions,\n      ...mapBaseOptions,\n      ...mapControlsOptions,\n    };\n\n    this.map = new google.maps.Map(this.element, mapOptions);\n    /**\n     * Collection of custom controls in the map UI\n     *\n     * @type {array}\n     */\n    this.controls = [];\n    /**\n     * Collection of map's overlays\n     *\n     * @type {array}\n     */\n    this.overlays = [];\n    /**\n     * Collection of KML/GeoRSS and FusionTable layers\n     *\n     * @type {array}\n     */\n    this.layers = [];\n    /**\n     * Collection of data layers (See {@link GMaps#addLayer})\n     *\n     * @type {object}\n     */\n    this.singleLayers = {};\n    /**\n     * Collection of map's markers\n     *\n     * @type {array}\n     */\n    this.markers = [];\n    /**\n     * Collection of map's lines\n     *\n     * @type {array}\n     */\n    this.polylines = [];\n    /**\n     * Collection of map's routes requested by {@link GMaps#getRoutes}, {@link GMaps#renderRoute}, {@link GMaps#drawRoute}, {@link GMaps#travelRoute} or {@link GMaps#drawSteppedRoute}\n     *\n     * @type {array}\n     */\n    this.routes = [];\n    /**\n     * Collection of map's polygons\n     *\n     * @type {array}\n     */\n    this.polygons = [];\n    this.infoWindow = null;\n    this.overlayElement = null;\n    /**\n     * Current map's zoom\n     *\n     * @type {number}\n     */\n    this.zoom = zoom;\n\n    this.registeredEvents = {};\n\n    if (markerClusterer) {\n      /**\n       * Marker Clusterer instance\n       *\n       * @type {object}\n       */\n      this.markerClusterer = markerClusterer.apply(this, [this.map]);\n    }\n\n    google.maps.event.addListener(this.map, 'zoom_changed', this.hideContextMenu);\n\n    setupEvents({ events: MAP_EVENTS, object: this.map, instance: this, handlers: options, });\n\n    google.maps.event.addListener(this.map, 'rightclick', (event) => {\n      if (options.rightclick) {\n        options.rightclick.call(this, event);\n      }\n\n      if (GMaps.contextMenus[this.id].map) {\n        this.buildContextMenu('map', event);\n      }\n    });\n  }\n\n  buildContextMenuHTML(control, event) {\n    if (!getElementById(GMAPS_MENU_ID)) {\n      return;\n    }\n\n    const contextMenuElement = getElementById(GMAPS_MENU_ID);\n    const options = GMaps.contextMenus[this.id][control];\n\n    const html = Object.keys(options).map(key =>\n      `<li><a id=\"${control}_${key}\" href=\"#\">${options[key].title}</a></li>`\n    ).join('');\n\n    contextMenuElement.innerHTML = html;\n\n    const contextMenuItems = contextMenuElement.getElementsByTagName('a');\n\n    [...contextMenuItems].forEach((contextMenuItem) => {\n      const contextMenuItemListener = (contextMenuItemListenerEvent) => {\n        contextMenuItemListenerEvent.preventDefault();\n\n        options[contextMenuItemListenerEvent.target.id.replace(`${control}_`, '')].action.call(this, event);\n        this.hideContextMenu();\n      };\n\n      google.maps.event.clearListeners(contextMenuItem, 'click');\n      google.maps.event.addDomListenerOnce(contextMenuItem, 'click', contextMenuItemListener, false);\n    });\n\n    const position = findAbsolutePosition(this.element);\n    const left = position[0] + event.pixel.x - 15;\n    const top = position[1] + event.pixel.y - 15;\n\n    contextMenuElement.style.left = `${left}px`;\n    contextMenuElement.style.top = `${top}px`;\n  }\n\n  buildContextMenu(control, event) {\n    if (control === 'marker') {\n      // eslint-disable-next-line no-param-reassign\n      event.pixel = {};\n\n      const overlay = new google.maps.OverlayView();\n      overlay.setMap(this.map);\n\n      overlay.draw = () => {\n        const projection = overlay.getProjection();\n        const position = event.marker.getPosition();\n\n        // eslint-disable-next-line no-param-reassign\n        event.pixel = projection.fromLatLngToContainerPixel(position);\n\n        this.buildContextMenuHTML(control, event);\n      };\n    } else {\n      this.buildContextMenuHTML(control, event);\n    }\n\n    const contextMenuElement = getElementById(GMAPS_MENU_ID);\n\n    setTimeout(() => {\n      contextMenuElement.style.display = 'block';\n    }, 0);\n  }\n\n  /**\n   * Add a context menu for a map or a marker.\n   *\n   * @param {object} options - The `options` object should contain:\n   * * `control` (string): Kind of control the context menu will be attached. Can be \"map\" or \"marker\".\n   * * `options` (array): A collection of context menu items:\n   *   * `title` (string): Item's title shown in the context menu.\n   *   * `name` (string): Item's identifier.\n   *   * `action` (function): Function triggered after selecting the context menu item.\n   */\n  setContextMenu(options) {\n    GMaps.contextMenus[this.id][options.control] = {};\n\n    Object.keys(options.options).forEach((key) => {\n      const option = options.options[key];\n\n      GMaps.contextMenus[this.id][options.control][option.name] = {\n        title: option.title,\n        action: option.action,\n      };\n    });\n\n    let contextMenuElement = getElementById(GMAPS_MENU_ID);\n\n    if (!contextMenuElement) {\n      contextMenuElement = document.createElement('ul');\n\n      contextMenuElement.id = GMAPS_MENU_ID;\n      contextMenuElement.style.display = 'none';\n      contextMenuElement.style.position = 'absolute';\n      contextMenuElement.style.minWidth = '100px';\n      contextMenuElement.style.background = 'white';\n      contextMenuElement.style.listStyle = 'none';\n      contextMenuElement.style.padding = '8px';\n      contextMenuElement.style.boxShadow = '2px 2px 6px #ccc';\n\n      document.body.appendChild(contextMenuElement);\n    }\n\n    google.maps.event.addDomListener(contextMenuElement, 'mouseout', (event) => {\n      if (!event.relatedTarget || !event.target.contains(event.relatedTarget)) {\n        window.setTimeout(() => {\n          contextMenuElement.style.display = 'none';\n        }, 700);\n      }\n    }, false);\n  }\n\n  /**\n   * Hide the current context menu\n   */\n  hideContextMenu() {\n    const contextMenuElement = getElementById(GMAPS_MENU_ID);\n\n    if (contextMenuElement) {\n      contextMenuElement.style.display = 'none';\n    }\n  }\n\n  /**\n   * Trigger a `resize` event, useful if you need to repaint the current map (for changes in the viewport or display / hide actions).\n   */\n  refresh() {\n    google.maps.event.trigger(this.map, 'resize');\n  }\n\n  /**\n   * Adjust the map zoom to include all the coordinates in the `latLngs` array.\n   *\n   * @param {array} latLngs - Collection of `google.maps.LatLng` objects.\n   */\n  fitLatLngBounds(latLngs) {\n    const bounds = new google.maps.LatLngBounds();\n\n    latLngs.forEach(latLng => bounds.extend(latLng));\n\n    this.map.fitBounds(bounds);\n  }\n\n  /**\n   * Adjust the map zoom to include all the markers added in the map.\n   */\n  fitZoom() {\n    const latLngs = this.markers\n      .filter(marker => marker.visible)\n      .map(marker => marker.getPosition());\n\n    this.fitLatLngBounds(latLngs);\n  }\n\n  /**\n   * Center the map using the `lat` and `lng` coordinates.\n   *\n   * @param {number} latitude - Latitude of the coordinate. If `latitude` and `longitude` are set, `position` is ignored.\n   * @param {number} longitude - Longitude of the coordinate. If `latitude` and `longitude` are set, `position` is ignored.\n   * @param {google.maps.LatLng} position - A `google.maps.LatLng` coordinate indicate the position. If set, `latitude` and `longitude` are ignored.\n   * @param {function} [callback] - Callback that will be executed after the map is centered.\n   */\n  setCenter(...args) {\n    const latLng = latLngFromArguments(...args);\n    const callback = args.slice().pop();\n\n    this.map.panTo(latLng);\n\n    if (typeof callback === 'function') {\n      callback.call(this);\n    }\n  }\n\n  /**\n   * Return the HTML element container of the map.\n   *\n   * @returns {HTMLElement} the element container.\n   */\n  getElement() {\n    return this.element;\n  }\n\n  /**\n   * Increase the map's zoom.\n   *\n   * @param {number} [magnitude] - The number of times the map will be zoomed in.\n   */\n  zoomIn(magnitude = 1) {\n    this.zoom = this.map.getZoom() + magnitude;\n    this.map.setZoom(this.zoom);\n  }\n\n  /**\n   * Decrease the map's zoom.\n   *\n   * @param {number} [magnitude] - The number of times the map will be zoomed out.\n   */\n  zoomOut(magnitude = 1) {\n    this.zoom = this.map.getZoom() - magnitude;\n    this.map.setZoom(this.zoom);\n  }\n}\n\nGMaps.contextMenus = {};\n\nconst googleMapsMapMethods = Object.keys(google.maps.Map.prototype)\n  .filter(key => (typeof google.maps.Map.prototype[key] === 'function' && !GMaps.prototype[key]));\n\ngoogleMapsMapMethods.forEach((methodName) => {\n  // eslint-disable-next-line func-names\n  GMaps.prototype[methodName] = function (...args) {\n    return this.map[methodName].apply(this.map, args);\n  };\n});\n\nexport default GMaps;\n","import GMaps from './core';\n\n/**\n * Extends GMaps to bind and trigger events.\n * @module Events\n */\n\n/**\n * Collection of custom events that can be registered and fired.\n *\n * @type {array}\n */\nGMaps.customEvents = ['marker_added', 'marker_removed', 'polyline_added', 'polyline_removed', 'polygon_added', 'polygon_removed', 'layer_added', 'layer_removed', 'overlay_map_type_added', 'overlay_map_type_removed', 'overlay_added', 'overlay_removed', 'geolocated', 'geolocation_failed'];\n\n/**\n * Add an event (native or custom) to an object.\n * @function on\n *\n * @param {string} eventName - The name of the event. It can be any of the native events from Google Maps, or the ones described in `GMaps.customEvents`.\n * @param {object} target - The target of the event. It can be a native object from Google Maps, (such as a google.maps.Map, google.maps.Marker, etc.), or a GMaps instance.\n * @param {function} handler - The handler (often called listener) of the event. Is a function that will be executed every time the event is fired.\n *\n * @returns {object}\n */\nGMaps.on = (eventName, object, handler) => {\n  let target = object;\n\n  if (GMaps.customEvents.indexOf(eventName) === -1) {\n    if (target instanceof GMaps) {\n      target = target.map;\n    }\n\n    return google.maps.event.addListener(target, eventName, handler);\n  }\n\n  const registeredEvent = {\n    handler,\n    eventName,\n  };\n\n  target.registeredEvents[eventName] = target.registeredEvents[eventName] || [];\n  target.registeredEvents[eventName].push(registeredEvent);\n\n  return registeredEvent;\n};\n\n/**\n * Remove an event (native or custom) to an object.\n * @function off\n *\n * @param {string} eventName - The name of the event. It can be any of the native events from Google Maps, or the ones described in `GMaps.customEvents`.\n * @param {object} target - The target of the event. It can be a native object from Google Maps, (such as a google.maps.Map, google.maps.Marker, etc.), or a GMaps instance.\n */\nGMaps.off = (eventName, object) => {\n  let target = object;\n\n  if (GMaps.customEvents.indexOf(eventName) === -1) {\n    if (target instanceof GMaps) {\n      target = target.map;\n    }\n\n    google.maps.event.clearListeners(target, eventName);\n  } else {\n    target.registeredEvents[eventName] = [];\n  }\n};\n\n/**\n * Add a native event that will be removed from the target after it has been executed once.\n * @function once\n *\n * @param {string} eventName - The name of the event. It has to be any of the native events from Google Maps.\n * @param {object} target - The target of the event. It has to be a native object from Google Maps, such as a google.maps.Map, google.maps.Marker, etc.\n * @param {function} handler - The handler (often called listener) of the event. Is a function that will be executed when the event is fired the first time.\n *\n * @returns {object}\n */\nGMaps.once = (eventName, object, handler) => {\n  let target = object;\n\n  if (GMaps.customEvents.indexOf(eventName) === -1) {\n    if (target instanceof GMaps) {\n      target = target.map;\n    }\n\n    return google.maps.event.addListenerOnce(target, eventName, handler);\n  }\n\n  return undefined;\n};\n\n/**\n * Trigger an event (native or custom) and execute all the handlers registered previously.\n * @function fire\n *\n * @param {string} eventName - The name of the event. It can be any of the native events from Google Maps, or the ones described in `GMaps.customEvents`.\n * @param {object} target - The target of the event. It can be a native object from Google Maps, (such as a google.maps.Map, google.maps.Marker, etc.), or a GMaps instance.\n * @param {object} context - The context for the event handler (represented by `this` keyword inside the handler).\n *\n * @returns {object}\n */\nGMaps.fire = (eventName, object, context) => {\n  if (GMaps.customEvents.indexOf(eventName) === -1) {\n    // eslint-disable-next-line no-undef\n    const eventArguments = Array.prototype.slice.apply(arguments).slice(2);\n    google.maps.event.trigger(object, eventName, eventArguments);\n  } else if (eventName in context.registeredEvents) {\n    context.registeredEvents[eventName].forEach(registeredEvent =>\n      registeredEvent.handler.call(context, object)\n    );\n  }\n};\n\nGMaps.prototype.on = function on(eventName, handler) {\n  return GMaps.on(eventName, this, handler);\n};\n\nGMaps.prototype.off = function off(eventName) {\n  GMaps.off(eventName, this);\n};\n\nGMaps.prototype.once = function once(eventName, handler) {\n  return GMaps.once(eventName, this, handler);\n};\n\nexport default GMaps;\n","import GMaps from './core';\n\n/**\n * Extends GMaps to use UI controls.\n * @module Controls\n */\n\nconst createControl = ({ style = {}, id, title, classes, content, position, events = {}, disableDefaultStyles, }) => {\n  const control = document.createElement('div');\n\n  control.style.cursor = 'pointer';\n\n  if (disableDefaultStyles !== true) {\n    control.style.fontFamily = 'inherit';\n    control.style.fontSize = 'inherit';\n    control.style.borderRadius = '2px';\n    control.style.boxShadow = 'rgba(0, 0, 0, 0.298039) 0px 1px 4px -1px';\n  }\n\n  Object.keys(style).forEach((property) => {\n    control.style[property] = style[property];\n    control.style.setProperty(property, style[property]);\n  });\n\n  if (id) {\n    control.id = id;\n  }\n\n  if (title) {\n    control.title = title;\n  }\n\n  if (classes) {\n    control.className = classes;\n  }\n\n  if (content) {\n    if (typeof content === 'string') {\n      control.innerHTML = content;\n    } else if (content instanceof window.HTMLElement) {\n      control.appendChild(content);\n    }\n  }\n\n  if (position) {\n    control.position = google.maps.ControlPosition[position.toUpperCase()];\n  }\n\n  Object.keys(events).forEach(eventName =>\n    google.maps.event.addDomListener(control, eventName, event =>\n      events[eventName].call(this, event)\n    )\n  );\n\n  control.index = 1;\n\n  return control;\n};\n\n/**\n * Add a custom control to the map UI.\n * @function addControl\n *\n * @param {object} options - The `options` object should contain:\n * * `style` (object): The keys and values of this object should be valid CSS properties and values.\n * * `id` (string): The HTML id for the custom control.\n * * `classes` (string): A string containing all the HTML classes for the custom control.\n * * `content` (string or HTML element): The content of the custom control.\n * * `position` (string): Any valid [`google.maps.ControlPosition`](https://developers.google.com/maps/documentation/javascript/controls#ControlPositioning) value, in lower or upper case.\n * * `events` (object): The keys of this object should be valid DOM events. The values should be functions.\n * * `disableDefaultStyles` (boolean): If false, removes the default styles for the controls like font (family and size), and box shadow.\n *\n * @returns {HTMLElement}\n */\nGMaps.prototype.addControl = function addControl(options) {\n  const control = createControl(options);\n\n  this.controls.push(control);\n  this.map.controls[control.position].push(control);\n\n  return control;\n};\n\n/**\n * Remove a control from the map. `control` should be a control returned by `addControl()`.\n * @function removeControl\n *\n * @param {HTMLElement} control - One of the controls returned by `addControl()`.\n * @returns {HTMLElement} the removed control.\n */\nGMaps.prototype.removeControl = function removeControl(control) {\n  const controlIndex = this.controls.indexOf(control);\n\n  this.controls.splice(controlIndex, 1);\n\n  if (control.position >= 0 && controlIndex >= 0) {\n    const controlsForPosition = this.map.controls[control.position];\n    const controlIndexInCollection = controlsForPosition.indexOf(control);\n\n    controlsForPosition.removeAt(controlIndexInCollection);\n  }\n\n  return control;\n};\n\nexport default GMaps;\n","import GMaps, { latLngFromArguments } from './core';\nimport './polyfills';\n\n/**\n * Extends GMaps to use geofences.\n * @module Geofences\n */\n\n/**\n * Check if a coordinate is inside or not a geofence.\n * @function checkGeofence\n *\n * @param {object} latLng - A LatLngLiteral object (a plain object with `lat` and `lng` properties).\n * @param {object} fence - A fence object, which can be an instance of `google.maps.Polygon`, `google.maps.Circle`, `google.maps.Rectangle` or `google.maps.LatLngBounds`.\n *\n * @returns {boolean} Is `true` if the coordinate is inside the fence, and `false` if is not.\n */\nGMaps.prototype.checkGeofence = function checkGeofence(...args) {\n  const lagLng = latLngFromArguments(...args);\n  const fence = args.pop();\n\n  return fence.containsLatLng(lagLng);\n};\n\n/**\n * Check if a marker's position is inside or not any of its geofences. It will trigger the `outsideCallback` function for every fence that contains the marker's position.\n * @function checkMarkerGeofence\n *\n * @param {google.maps.Marker} marker - A marker added with `GMaps#addMarker`.\n * @param {function} outsideCallback - A function that will receive two arguments: the `marker` and the current fence.\n */\nGMaps.prototype.checkMarkerGeofence = function checkMarkerGeofence(marker, outsideCallback) {\n  if (marker.fences) {\n    marker.fences.forEach((fence) => {\n      const position = marker.getPosition();\n\n      if (!this.checkGeofence(position, fence)) {\n        outsideCallback(marker, fence);\n      }\n    });\n  }\n};\n\nexport default GMaps;\n","import GMaps, { setupEvents } from './core';\nimport './events';\nimport './geofences';\n\n/**\n * Extends GMaps to use markers.\n * @module Markers\n */\n\nconst INFO_WINDOW_EVENTS = ['closeclick', 'content_changed', 'domready', 'position_changed', 'zindex_changed'];\nconst MARKER_EVENTS = ['animation_changed', 'clickable_changed', 'cursor_changed', 'draggable_changed', 'flat_changed', 'icon_changed', 'position_changed', 'shadow_changed', 'shape_changed', 'title_changed', 'visible_changed', 'zindex_changed'];\nconst MARKER_MOUSE_EVENTS = ['dblclick', 'drag', 'dragend', 'dragstart', 'mousedown', 'mouseout', 'mouseover', 'mouseup'];\n\nGMaps.prototype.createMarker = function createMarker(baseOptions) {\n  const self = this;\n  const { lat, latitude = lat, lng, longitude = lng, position, details, fences, outside, infoWindow, ...options } = baseOptions;\n\n  if (latitude === undefined && longitude === undefined && position === undefined) {\n    throw new Error('No latitude or longitude defined.');\n  }\n\n  const markerOptions = {\n    ...options,\n    position: position || new google.maps.LatLng(latitude, longitude),\n    map: null,\n  };\n\n  const marker = new google.maps.Marker(markerOptions);\n\n  marker.fences = fences;\n\n  if (infoWindow) {\n    marker.infoWindow = new google.maps.InfoWindow(infoWindow);\n\n    setupEvents({ events: INFO_WINDOW_EVENTS, object: marker.infoWindow, instance: this, handlers: infoWindow, });\n  }\n\n  setupEvents({ events: MARKER_EVENTS, object: marker, instance: this, handlers: options, });\n\n  MARKER_MOUSE_EVENTS.forEach((eventName) => {\n    if (options[eventName]) {\n      google.maps.event.addListener(marker, eventName, (event = this) => {\n        if (!event.pixel) {\n          // eslint-disable-next-line no-param-reassign\n          event.pixel = this.map.getProjection().fromLatLngToPoint(event.latLng);\n        }\n\n        options[eventName].call(this, event);\n      });\n    }\n  });\n\n  google.maps.event.addListener(marker, 'click', function onMarkerClick(event) {\n    this.details = details;\n\n    if (options.click) {\n      options.click.call(this, event);\n    }\n\n    if (marker.infoWindow) {\n      self.hideInfoWindows();\n      marker.infoWindow.open(self.map, marker);\n    }\n  });\n\n  google.maps.event.addListener(marker, 'rightclick', function onMarkerRightClick(event) {\n    // eslint-disable-next-line no-param-reassign\n    event.marker = this;\n\n    if (options.rightclick) {\n      options.rightclick.call(this, event);\n    }\n\n    if (GMaps.contextMenus[self.id].marker !== undefined) {\n      self.buildContextMenu('marker', event);\n    }\n  });\n\n  if (marker.fences) {\n    google.maps.event.addListener(marker, 'dragend', function onMarkerDragEnd() {\n      self.checkMarkerGeofence(this, outside);\n    });\n  }\n\n  return marker;\n};\n\n/**\n * Draw a marker in the Map and add it to the markers collection. This method also fires a `marker_added` event.\n * @function addMarker\n *\n * @param {object} options - The `options` object should contain:\n * @param {number} options.latitude - Latitude of the position. If `latitude` and `longitude` are set, `position` is ignored.\n * @param {number} options.longitude - Longitude of the position. If `latitude` and `longitude` are set, `position` is ignored.\n * @param {google.maps.LatLng} options.position - A `google.maps.LatLng` coordinate indicate the position. If set, `latitude` and `longitude` are ignored.\n * @param {object} options.details - Custom object with extra data.\n * @param {array} options.fences - Collection of `google.maps.Polygon` objects that defines a marker's boundaries or geofences.\n * @param {function} options.outside - Callback fired when the marker is oustide any of its fences.\n * @param {object} options.infoWindow - Object with all options defined in [google.maps.InfoWindowOptions](https://developers.google.com/maps/documentation/javascript/reference#InfoWindowOptions).\n *\n * @see `options` also accepts any option defined in the [official documentation](https://developers.google.com/maps/documentation/javascript/reference#MarkerOptions) and any event defined in the [\"Events\" section](https://developers.google.com/maps/documentation/javascript/reference#Marker).\n *\n * @returns {google.maps.Marker}\n */\nGMaps.prototype.addMarker = function addMarker(options) {\n  // eslint-disable-next-line camelcase\n  const { gm_accessors_, lat, latitude = lat, lng, longitude = lng, position, } = options;\n\n  let marker;\n\n  // eslint-disable-next-line camelcase\n  if (gm_accessors_) {\n    // Native google.maps.Marker object\n    marker = options;\n  } else if ((latitude && longitude) || position) {\n    marker = this.createMarker(options);\n  } else {\n    throw new Error('No latitude or longitude defined.');\n  }\n\n  marker.setMap(this.map);\n\n  if (this.markerClusterer) {\n    this.markerClusterer.addMarker(marker);\n  }\n\n  this.markers.push(marker);\n\n  GMaps.fire('marker_added', marker, this);\n\n  return marker;\n};\n\n/**\n * Draw a collection of markers into the Map. This method fires a `marker_added` event for each marker added.\n * @function addMarkers\n *\n * @param {array} markers - An array of `options` objects, which accepts the same options as in {@link GMaps#addMarker}.\n *\n * @returns {array}\n */\nGMaps.prototype.addMarkers = function addMarkers(markers) {\n  markers.forEach(marker => this.addMarker(marker));\n\n  return this.markers;\n};\n\n/**\n * Hide all markers' InfoWindows.\n * @function hideInfoWindows\n */\nGMaps.prototype.hideInfoWindows = function hideInfoWindows() {\n  this.markers.forEach((marker) => {\n    if (marker.infoWindow) {\n      marker.infoWindow.close();\n    }\n  });\n};\n\n/**\n * Remove a marker from the map and from the markers collection. This method also fires a `marker_removed` event.\n * @function removeMarker\n *\n * @param {google.maps.Polygon} polygon - The polygon to be removed.\n */\nGMaps.prototype.removeMarker = function removeMarker(marker, options = {}) {\n  const { fireEvent = true, } = options;\n  const markerIndex = this.markers.indexOf(marker);\n\n  if (markerIndex >= 0) {\n    marker.setMap(null);\n    this.markers.splice(markerIndex, 1);\n\n    if (this.markerClusterer) {\n      this.markerClusterer.removeMarker(marker);\n    }\n\n    if (fireEvent) {\n      GMaps.fire('marker_removed', marker, this);\n    }\n  }\n\n  return marker;\n};\n\n/**\n * Remove a group of markers (or all of them) from the Map and from the markers collection. This method does not fire a `marker_removed` event.\n * @function removeMarkers\n *\n * @param {array} markers - The markers to be removed. If not set, it removes all markers in the Map.\n */\nGMaps.prototype.removeMarkers = function removeMarkers(markers = this.markers) {\n  markers.forEach(marker => this.removeMarker(marker, { fireEvent: false, }));\n};\n\nexport default GMaps;\n","import GMaps from './core';\nimport './events';\n\n/**\n * Extends GMaps to use custom overlays.\n * @module Overlays\n */\n\nconst STOP_PROPAGATION_EVENTS = ['contextmenu', 'DOMMouseScroll', 'dblclick', 'mousedown'];\n\n/**\n * Draw an overlay in the Map and add it to the overlays collection. This method also fires a `overlay_added` event.\n * @function drawOverlay\n *\n * @param {object} options - The `options` object should contain:\n * @param {boolean} options.autoShow - Show the overlay inmediatly after being created.\n * @param {number} options.latitude - Latitude of the coordinate where the overlay is placed. If `latitude` and `longitude` are set, `position`is ignored.\n * @param {number} options.longitude - Longitude of the coordinate where the overlay is placed. If `latitude` and `longitude` are set, `position`is ignored.\n * @param {google.maps.LatLng} options.position - A `google.maps.LatLng` coordinate where the overlay is placed. If set, `latitude` and `longitude` are ignored.\n * @param {string} options.content - HTML that will be drawn in the overlay.\n * @param {string} options.layer - Id of any of the layers defined in [google.maps.MapPanes](https://developers.google.com/maps/documentation/javascript/reference#MapPanes):\n *   * floatPane\n *   * floatShadow\n *   * mapPane\n *   * overlayImage\n *   * overlayLayer\n *   * overlayMouseTarget\n *   * overlayShadow\n * @param {string} options.verticalAlign - Vertical align of the overlay (where the center is the coordinate `latitude`, `longitude`):\n *   * top\n *   * middle\n *   * bottom\n * @param {string} options.horizontalAlign - Horizontal align of the overlay (where the center is the coordinate `latitude`, `longitude`):\n *   * left\n *   * center\n *   * right\n * @param {number} options.horizontalOffset - Horizontal offset in pixels of the overlay.\n * @param {number} options.verticalOffset - Vertical offset in pixels of the overlay.\n *\n * @returns {google.maps.OverlayView}\n */\nGMaps.prototype.drawOverlay = function drawOverlay(baseOptions) {\n  const self = this;\n  const overlay = new google.maps.OverlayView();\n  const {\n    autoShow = true,\n    lat,\n    latitude = lat,\n    lng,\n    longitude = lng,\n    position = new google.maps.LatLng(latitude, longitude),\n    layer = 'overlayLayer',\n    horizontalOffset = 0,\n    verticalOffset = 0,\n    verticalAlign,\n    horizontalAlign,\n    ...options\n  } = baseOptions;\n\n  overlay.setMap(this.map);\n\n  overlay.onAdd = function onAdd() {\n    const element = document.createElement('div');\n\n    element.style.borderStyle = 'none';\n    element.style.borderWidth = '0px';\n    element.style.position = 'absolute';\n    element.style.zIndex = 100;\n    element.innerHTML = options.content;\n\n    overlay.element = element;\n\n    const panes = this.getPanes();\n    const overlayLayer = panes[layer];\n\n    overlayLayer.appendChild(element);\n\n    STOP_PROPAGATION_EVENTS.forEach(eventName =>\n      google.maps.event.addDomListener(element, eventName, (event) => {\n        if (window.navigator.userAgent.toLowerCase().indexOf('msie') !== -1 && document.all) {\n          // eslint-disable-next-line no-param-reassign\n          event.cancelBubble = true;\n          // eslint-disable-next-line no-param-reassign\n          event.returnValue = false;\n        } else {\n          event.stopPropagation();\n        }\n      })\n    );\n\n    if (options.click) {\n      panes.overlayMouseTarget.appendChild(overlay.element);\n      google.maps.event.addDomListener(overlay.element, 'click', () => {\n        options.click.call(self, overlay);\n      });\n    }\n\n    google.maps.event.trigger(this, 'ready');\n  };\n\n  overlay.draw = function draw() {\n    const projection = this.getProjection();\n    const pixel = projection.fromLatLngToDivPixel(position);\n\n    const { element, } = overlay;\n    const content = element.children[0];\n    const contentHeight = content.clientHeight;\n    const contentWidth = content.clientWidth;\n\n    switch (verticalAlign) {\n      case 'top':\n        element.style.top = `${pixel.y - contentHeight + verticalOffset}px`;\n        break;\n      default:\n      case 'middle':\n        element.style.top = `${pixel.y - (contentHeight / 2) + verticalOffset}px`;\n        break;\n      case 'bottom':\n        element.style.top = `${pixel.y + verticalOffset}px`;\n        break;\n    }\n\n    switch (horizontalAlign) {\n      case 'left':\n        element.style.left = `${pixel.x - contentWidth + horizontalOffset}px`;\n        break;\n      default:\n      case 'center':\n        element.style.left = `${pixel.x - (contentWidth / 2) + horizontalOffset}px`;\n        break;\n      case 'right':\n        element.style.left = `${pixel.x + horizontalOffset}px`;\n        break;\n    }\n\n    element.style.display = autoShow ? 'block' : 'none';\n\n    if (!autoShow) {\n      options.show.call(this, element);\n    }\n  };\n\n  overlay.onRemove = function onRemove() {\n    const { element, } = overlay;\n\n    if (options.remove) {\n      options.remove.call(this, element);\n    } else {\n      element.parentNode.removeChild(element);\n      overlay.element = null;\n    }\n  };\n\n  this.overlays.push(overlay);\n\n  GMaps.fire('overlay_added', overlay, this);\n\n  return overlay;\n};\n\n/**\n * Remove an overlay from the map and from the overlays collection. This method also fires a `overlay_removed` event.\n * @function removeOverlay\n *\n * @param {google.maps.OverlayView} overlay - The overlay to be removed.\n */\nGMaps.prototype.removeOverlay = function removeOverlay(overlay) {\n  const overlayIndex = this.overlays.indexOf(overlay);\n\n  if (overlayIndex >= 0) {\n    overlay.setMap(null);\n    this.overlays.splice(overlayIndex, 1);\n\n    GMaps.fire('overlay_removed', overlay, this);\n  }\n};\n\n/**\n * Remove all the overlays from the map and clear the overlays collection. This method does not fire a `overlay_removed` event.\n * @function removeOverlays\n */\nGMaps.prototype.removeOverlays = function removeOverlays() {\n  this.overlays.forEach(overlay => overlay.setMap(null));\n\n  this.overlays = [];\n};\n\nexport default GMaps;\n","import GMaps, { setupEvents, arrayToLatLng, flattenArray } from './core';\nimport './events';\n\n/**\n * Extends GMaps to use polylines and polygons.\n * @module Geometry\n */\n\nconst EVENTS = ['click', 'dblclick', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick'];\n\n/**\n * Draw a polyline in the Map and add it to the polylines collection. This method also fires a `polyline_added` event.\n * @function drawPolyline\n *\n * @param {object} options - The `options` object should contain:\n * @param {array} options.path - Collection of coordinates (which can be either an array [lat, lng] or a google.maps.LatLng object).\n * @param {string} options.strokeColor - Color of the polyline. Can be hexadecimal or CSS name.\n * @param {float} options.strokeOpacity - Opacity of the polyline from 0.0 to 1.0.\n * @param {integer} options.strokeWeight - Polyline width in pixels.\n *\n * @see `options` also accepts any option defined in the [official documentation](https://developers.google.com/maps/documentation/javascript/reference#PolylineOptions) and any event defined in the [\"Events\" section](https://developers.google.com/maps/documentation/javascript/reference#Polyline).\n *\n * @returns {google.maps.Polyline}\n */\nGMaps.prototype.drawPolyline = function drawPolyline(baseOptions) {\n  const { icons, strokeColor, strokeOpacity, strokeWeight, geodesic, clickable = true, editable = false, visible = true, zIndex, ...options } = baseOptions;\n  let path = [];\n\n  if (options.path.length) {\n    if (options.path[0][0] === undefined) {\n      path = [...options.path];\n    } else {\n      path = options.path.map(latLng =>\n        new google.maps.LatLng(latLng[0], latLng[1])\n      );\n    }\n  }\n\n  const polylineOptions = {\n    ...options,\n    map: this.map,\n    path,\n    strokeColor,\n    strokeOpacity,\n    strokeWeight,\n    geodesic,\n    visible,\n    clickable,\n    editable,\n    icons,\n    zIndex,\n  };\n\n  const polyline = new google.maps.Polyline(polylineOptions);\n\n  setupEvents({ events: EVENTS, object: polyline, instance: this, handlers: options, });\n\n  this.polylines.push(polyline);\n\n  GMaps.fire('polyline_added', polyline, this);\n\n  return polyline;\n};\n\n/**\n * Remove a polyline from the map and from the polylines collection. This method also fires a `polyline_removed` event.\n * @function removePolyline\n *\n * @param {google.maps.Polyline} polyline - The polyline to be removed.\n */\nGMaps.prototype.removePolyline = function removePolyline(polyline) {\n  const polylineIndex = this.polylines.indexOf(polyline);\n\n  if (polylineIndex >= 0) {\n    polyline.setMap(null);\n    this.polylines.splice(polylineIndex, 1);\n\n    GMaps.fire('polyline_removed', polyline, this);\n  }\n};\n\n/**\n * Remove all the polylines from the map and clear the polylines collection. This method does not fire a `polyline_removed` event.\n * @function removePolylines\n */\nGMaps.prototype.removePolylines = function removePolylines() {\n  this.polylines.forEach(polyline => polyline.setMap(null));\n\n  this.polylines = [];\n};\n\n/**\n * Draw a circle in the Map and it to the polygons collection.\n * @function drawCircle\n *\n * @param {object} options - The `options` object should contain:\n * @param {number} options.latitude - Latitude of the center. If `latitude` and `longitude` are set, `center`is ignored.\n * @param {number} options.longitude - Longitude of the center. If `latitude` and `longitude` are set, `center`is ignored.\n * @param {google.maps.LatLng} options.center - A `google.maps.LatLng` coordinate indicate the center. If set, `latitude` and `longitude` are ignored.\n *\n * @see `options` also accepts any option defined in the [official documentation](https://developers.google.com/maps/documentation/javascript/reference#CircleOptions) and any event defined in the [\"Events\" section](https://developers.google.com/maps/documentation/javascript/reference#Circle).\n *\n * @returns {google.maps.Circle}\n */\nGMaps.prototype.drawCircle = function drawCircle(baseOptions) {\n  const { lat, latitude = lat, lng, longitude = lng, ...options } = baseOptions;\n  const { center = new google.maps.LatLng(latitude, longitude), } = options;\n  const polygonOptions = {\n    ...options,\n    map: this.map,\n    center,\n  };\n\n  const polygon = new google.maps.Circle(polygonOptions);\n\n  setupEvents({ events: EVENTS, object: polygon, instance: this, handlers: options, });\n\n  this.polygons.push(polygon);\n\n  return polygon;\n};\n\n/**\n * Draw a rectangle in the Map and it to the polygons collection.\n * @function drawRectangle\n *\n * @param {object} options - The `options` object should contain:\n * @param {array} options.bounds - Bi-dimensional array of latitudes and longitudes.\n *\n * @see `options` also accepts any option defined in the [official documentation](https://developers.google.com/maps/documentation/javascript/reference#RectangleOptions) and any event defined in the [\"Events\" section](https://developers.google.com/maps/documentation/javascript/reference#Rectangle).\n *\n * @returns {google.maps.Rectangle}\n */\nGMaps.prototype.drawRectangle = function drawRectangle(baseOptions) {\n  const { bounds, ...options } = baseOptions;\n\n  const latLngBounds = new google.maps.LatLngBounds(\n    new google.maps.LatLng(bounds[0][0], bounds[0][1]),\n    new google.maps.LatLng(bounds[1][0], bounds[1][1])\n  );\n\n  const polygonOptions = {\n    ...options,\n    bounds: latLngBounds,\n    map: this.map,\n  };\n\n  const polygon = new google.maps.Rectangle(polygonOptions);\n\n  setupEvents({ events: EVENTS, object: polygon, instance: this, handlers: options, });\n\n  this.polygons.push(polygon);\n\n  return polygon;\n};\n\n/**\n * Draw a polygon in the Map and it to the polygons collection.\n * @function drawPolygon\n *\n * @param {object} options - The `options` object should contain:\n * @param {array} options.paths - Bi-dimensional array of latitudes and longitudes.\n * @param {boolean} options.useGeoJSON - If set, allows `paths` to use GeoJSON format.\n *\n * @see `options` also accepts any option defined in the [official documentation](https://developers.google.com/maps/documentation/javascript/reference#PolygonOptions) and any event defined in the [\"Events\" section](https://developers.google.com/maps/documentation/javascript/reference#Polygon).\n *\n * @returns {google.maps.Polygon}\n */\nGMaps.prototype.drawPolygon = function drawPolygon(baseOptions) {\n  const { useGeoJSON = false, ...options } = baseOptions;\n\n  const basePaths = useGeoJSON ? options.paths : [options.paths.slice(0)];\n  let paths = [];\n\n  if (basePaths.length) {\n    if (basePaths[0].length) {\n      paths = flattenArray(\n        basePaths.map(path =>\n          arrayToLatLng(path, useGeoJSON)\n        )\n      );\n    }\n  }\n\n  const polygonOptions = {\n    ...options,\n    map: this.map,\n    paths,\n  };\n\n  const polygon = new google.maps.Polygon(polygonOptions);\n\n  setupEvents({ events: EVENTS, object: polygon, instance: this, handlers: options, });\n\n  this.polygons.push(polygon);\n\n  GMaps.fire('polygon_added', polygon, this);\n\n  return polygon;\n};\n\n/**\n * Remove a polygon from the map and from the polygons collection. This method also fires a `polygon_removed` event.\n * @function removePolygon\n *\n * @param {google.maps.Polygon} polygon - The polygon to be removed.\n */\nGMaps.prototype.removePolygon = function removePolygon(polygon) {\n  const polygonIndex = this.polygons.indexOf(polygon);\n\n  if (polygonIndex >= 0) {\n    polygon.setMap(null);\n    this.polygons.splice(polygonIndex, 1);\n\n    GMaps.fire('polygon_removed', polygon, this);\n  }\n};\n\n/**\n * Remove all the polygons from the map and clear the polygons collection. This method does not fire a `polygon_removed` event.\n * @function removePolygons\n */\nGMaps.prototype.removePolygons = function removePolygons() {\n  this.polygons.forEach(polygon => polygon.setMap(null));\n\n  this.polygons = [];\n};\n\nexport default GMaps;\n","import GMaps, { setupEventListener } from './core';\nimport './events';\n\n/**\n * Extends GMaps to use polylines and polygons.\n * @module Layers\n */\n\nGMaps.prototype.getFromFusionTables = function getFromFusionTables(baseOptions) {\n  const { events = {}, ...options } = baseOptions;\n\n  const layer = new google.maps.FusionTablesLayer(options);\n\n  Object.keys(events).forEach(eventName =>\n    setupEventListener({\n      object: layer,\n      eventName,\n      instance: this,\n      handler: events[eventName],\n    })\n  );\n\n  this.layers.push(layer);\n\n  return layer;\n};\n\n/**\n * Draw a FusionTables layer in the Map.\n * @function loadFromFusionTables\n *\n * @param {object} options - The `options` accepts any option defined in the [official documentation](https://developers.google.com/maps/documentation/javascript/reference#FusionTablesLayerOptions).\n *\n * @see `options` also accepts an `events` object, which accepts only `click`.\n *\n * @returns {google.maps.FusionTablesLayer}\n */\nGMaps.prototype.loadFromFusionTables = function loadFromFusionTables(options) {\n  const layer = this.getFromFusionTables(options);\n  layer.setMap(this.map);\n\n  return layer;\n};\n\nGMaps.prototype.getFromKML = function getFromKML(baseOptions) {\n  const { url, events, ...options } = baseOptions;\n\n  const layer = new google.maps.KmlLayer(url, options);\n\n  Object.keys(events).forEach(eventName =>\n    setupEventListener({\n      object: layer,\n      eventName,\n      instance: this,\n      handler: events[eventName],\n    })\n  );\n\n  this.layers.push(layer);\n\n  return layer;\n};\n\n/**\n * Draw a KML layer in the Map.\n * @function loadFromKML\n *\n * @param {object} options - The `options` accepts any option defined in the [official documentation](https://developers.google.com/maps/documentation/javascript/reference#KmlLayerOptions).\n *\n * @see `options` also accepts an `events` object, which accepts all events defined in the [\"Events\" section](https://developers.google.com/maps/documentation/javascript/reference#KmlLayer).\n *\n * @returns {google.maps.KmlLayer}\n */\nGMaps.prototype.loadFromKML = function loadFromKML(options) {\n  const layer = this.getFromKML(options);\n  layer.setMap(this.map);\n\n  return layer;\n};\n\n/**\n * Draw a layer in the Map. This method also fires a `layer_added` event.\n * @function addLayer\n *\n * @param {string} layerName - The name of a Google Maps layer, which can be: `traffic`, `transit` or `bicycling`.\n *\n * @returns {google.maps.TrafficLayer|google.maps.TransitLayer|google.maps.BicyclingLayer}\n */\nGMaps.prototype.addLayer = function addLayer(layerName, baseOptions = {}) {\n  const { filter, click, search, nearbySearch, radarSearch, textSearch, ...options } = baseOptions;\n  const { bounds, keyword, location, name, radius, rankBy, types, query, } = options;\n  let layer;\n\n  switch (layerName) {\n    case 'traffic':\n      layer = new google.maps.TrafficLayer();\n      this.singleLayers.traffic = layer;\n      break;\n    case 'transit':\n      layer = new google.maps.TransitLayer();\n      this.singleLayers.transit = layer;\n      break;\n    case 'bicycling':\n      layer = new google.maps.BicyclingLayer();\n      this.singleLayers.bicycling = layer;\n      break;\n    case 'places':\n      layer = new google.maps.places.PlacesService(this.map);\n      this.singleLayers.places = layer;\n\n      if (search || nearbySearch || radarSearch) {\n        const placeSearchRequest = {\n          bounds,\n          keyword,\n          location,\n          name,\n          radius,\n          rankBy,\n          types,\n        };\n\n        if (radarSearch) {\n          layer.radarSearch(placeSearchRequest, radarSearch);\n        }\n\n        if (search) {\n          layer.search(placeSearchRequest, search);\n        }\n\n        if (nearbySearch) {\n          layer.nearbySearch(placeSearchRequest, nearbySearch);\n        }\n      }\n\n      if (textSearch) {\n        const textSearchRequest = {\n          bounds,\n          location,\n          query,\n          radius,\n        };\n\n        layer.textSearch(textSearchRequest, textSearch);\n      }\n      break;\n    default:\n      break;\n  }\n\n  if (layer) {\n    if (typeof layer.setOptions === 'function') {\n      layer.setOptions(options);\n    }\n\n    if (typeof layer.setMap === 'function') {\n      layer.setMap(this.map);\n    }\n\n    GMaps.fire('layer_added', layer, this);\n\n    return layer;\n  }\n};\n\n/**\n * Remove a layer from the map. If the layer is a FusionTables layer or a KML layer, `removeLayer` also removes the layer from the layers collection and fires a `layer_removed` event.\n * @function removeLayer\n *\n * @param {google.maps.Polygon} polygon - The polygon to be removed.\n */\nGMaps.prototype.removeLayer = function removeLayer(layer) {\n  if (typeof layer === 'string' && this.singleLayers[layer] !== undefined) {\n    this.singleLayers[layer].setMap(null);\n\n    delete this.singleLayers[layer];\n  } else {\n    const layerIndex = this.layers.indexOf(layer);\n\n    if (layerIndex >= 0) {\n      layer.setMap(null);\n      this.layers.splice(layerIndex, 1);\n\n      GMaps.fire('layer_removed', layer, this);\n    }\n  }\n};\n\nexport default GMaps;\n","import GMaps, { latLngFromArguments, flattenArray, arrayToLatLng } from './core';\n\n/**\n * Extends GMaps to use routes.\n * @module Routes\n */\n\n/**\n * Get routes between two coordinates.\n * @function getRoutes\n *\n * @param {object} options - The `options` object should contain:\n * @param {string|google.maps.LatLng|google.maps.Place|google.maps.LatLngLiteral} options.origin - Location of origin.\n * @param {string|google.maps.LatLng|google.maps.Place|google.maps.LatLngLiteral} options.destination - Location of destination.\n * @param {string} options.travelMode - Can be `bicycling`, `driving`, `transit` or `walking`.\n * @param {array} options.waypoints - Array of [google.maps.DirectionsWaypoint](https://developers.google.com/maps/documentation/javascript/reference#DirectionsWaypoint) objects.\n * @param {function} options.callback - Function that will be executed after the results are returned.\n *\n * @see `options` also accepts any option defined in the [official documentation](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRequest).\n */\nGMaps.prototype.getRoutes = function getRoutes(baseOptions) {\n  const { origin, destination, travelMode = 'walking', unitSystem = 'metric', avoidHighways = false, avoidTolls = false, optimizeWaypoints = false, waypoints = [], callback, error, ...options } = baseOptions;\n\n  const travelModeId = google.maps.TravelMode[travelMode.toUpperCase()];\n  const unitSystemId = google.maps.TravelMode[unitSystem.toUpperCase()];\n\n  const requestOptions = {\n    ...options,\n    travelMode: travelModeId,\n    unitSystem: unitSystemId,\n    avoidHighways,\n    avoidTolls,\n    optimizeWaypoints,\n    waypoints,\n    origin: typeof origin === 'string' ? origin : latLngFromArguments(...origin),\n    destination: typeof destination === 'string' ? destination : latLngFromArguments(...destination),\n  };\n\n  const service = new google.maps.DirectionsService();\n\n  service.route(requestOptions, (result, status) => {\n    if (status === google.maps.DirectionsStatus.OK) {\n      if (callback) {\n        callback([...result.routes], result, status);\n      }\n    } else if (error) {\n      error(result, status);\n    }\n  });\n};\n\n/**\n * Remove all routes stored in routes collection.\n * @function removeRoutes\n */\nGMaps.prototype.removeRoutes = function removeRoutes() {\n  this.routes = [];\n};\n\n/**\n * Get elevation information for locations or routes.\n * @function getElevations\n *\n * @param {array} locations - Bi-dimensional array of latitudes and longitudes.\n * @param {boolean} path - If is true, makes a request along a path. If is false, only get elevation information on discrete locations.\n * @param {function} callback - Native callback function defined in [google.maps.ElevationService ('Methods' section)](https://developers.google.com/maps/documentation/javascript/reference#ElevationService) (`getElevationAlongPath` if `path` is true, `getElevationForLocations` if `path` is false).\n */\nGMaps.prototype.getElevations = function getElevations(baseOptions) {\n  const { path = false, samples = 256, callback, ...options } = baseOptions;\n\n  let locations = options.locations || [];\n\n  if (locations.length > 0) {\n    if (locations[0].length > 0) {\n      locations = flattenArray([locations].map(location => arrayToLatLng(location, false)));\n    }\n  }\n\n  const service = new google.maps.ElevationService();\n\n  if (!path) {\n    const requestOptions = {\n      ...options,\n      locations,\n    };\n\n    delete requestOptions.path;\n    delete requestOptions.samples;\n\n    service.getElevationForLocations(requestOptions, (result, status) => {\n      if (typeof callback === 'function') {\n        callback(result, status);\n      }\n    });\n  } else {\n    const requestOptions = {\n      path: locations,\n      samples,\n    };\n\n    service.getElevationAlongPath(requestOptions, (result, status) => {\n      if (typeof callback === 'function') {\n        callback(result, status);\n      }\n    });\n  }\n};\n\n/**\n * Alias for {@link GMaps#removePolylines}.\n * @function cleanRoute\n */\nGMaps.prototype.cleanRoute = GMaps.prototype.removePolylines;\n\nGMaps.prototype.renderRoute = function renderRoute(options, baseRenderOptions) {\n  const panel = ((typeof baseRenderOptions.panel === 'string') ? document.getElementById(baseRenderOptions.panel.replace('#', '')) : baseRenderOptions.panel);\n\n  const renderOptions = {\n    ...baseRenderOptions,\n    panel,\n    map: this.map,\n  };\n\n  const display = new google.maps.DirectionsRenderer(renderOptions);\n\n  this.getRoutes({\n    origin: options.origin,\n    destination: options.destination,\n    travelMode: options.travelMode,\n    waypoints: options.waypoints,\n    unitSystem: options.unitSystem,\n    error: options.error,\n    avoidHighways: options.avoidHighways,\n    avoidTolls: options.avoidTolls,\n    optimizeWaypoints: options.optimizeWaypoints,\n    callback(_, response, status) {\n      if (status === google.maps.DirectionsStatus.OK) {\n        display.setDirections(response);\n      }\n    },\n  });\n};\n\n/**\n * Draw a route using polylines. It uses the last route found by {@link GMaps#getRoutes}.\n * @function drawRoute\n *\n * @param {object} options - Accepts the same options as {@link GMaps#getRoutes}.\n * @param {string|google.maps.LatLng|google.maps.Place|google.maps.LatLngLiteral} options.origin - Location of origin.\n * @param {string|google.maps.LatLng|google.maps.Place|google.maps.LatLngLiteral} options.destination - Location of destination.\n * @param {string} options.strokeColor - Color of the polyline. Can be hexadecimal or CSS name.\n * @param {float} options.strokeOpacity - Opacity of the polyline from 0.0 to 1.0\n * @param {integer} options.strokeWeight - Polyline width in pixels.\n */\nGMaps.prototype.drawRoute = function drawRoute(options) {\n  const self = this;\n\n  this.getRoutes({\n    origin: options.origin,\n    destination: options.destination,\n    travelMode: options.travelMode,\n    waypoints: options.waypoints,\n    unitSystem: options.unitSystem,\n    error: options.error,\n    avoidHighways: options.avoidHighways,\n    avoidTolls: options.avoidTolls,\n    optimizeWaypoints: options.optimizeWaypoints,\n    callback(routes) {\n      if (routes.length > 0) {\n        const lastRoute = routes[routes.length - 1];\n        const polylineOptions = {\n          path: lastRoute.overview_path,\n          strokeColor: options.strokeColor,\n          strokeOpacity: options.strokeOpacity,\n          strokeWeight: options.strokeWeight,\n        };\n\n        if (options.icons) {\n          polylineOptions.icons = options.icons;\n        }\n\n        self.drawPolyline(polylineOptions);\n\n        if (options.callback) {\n          options.callback(lastRoute);\n        }\n      }\n    },\n  });\n};\n\n/**\n * Travel a route automatically. It uses the last route found by {@link GMaps#getRoutes}.\n * @function travelRoute\n *\n * @param {object} options - Accepts the same options as {@link GMaps#getRoutes}.\n * @param {string|google.maps.LatLng|google.maps.Place|google.maps.LatLngLiteral} options.origin - Location of origin.\n * @param {string|google.maps.LatLng|google.maps.Place|google.maps.LatLngLiteral} options.destination - Location of destination.\n * @param {object} options.route - A [google.maps.DirectionsRoute](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRoute) object. If set, `origin` and `destination` are ignored.\n * @param {function} options.start - Fired before the first step. It receives a single argument, which is a [DirectionsRoute](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRoute) object.\n * @param {function} options.step - Fired each step in the route. It receives 2 arguments, which is a [DirectionsStep](https://developers.google.com/maps/documentation/javascript/reference#DirectionsStep) object and the total length of the steps.\n * @param {function} options.end - Fired after the last step. It receives a single argument, which is a [DirectionsRoute](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRoute) object.\n */\nGMaps.prototype.travelRoute = function travelRoute(options) {\n  if (options.origin && options.destination) {\n    this.getRoutes({\n      origin: options.origin,\n      destination: options.destination,\n      travelMode: options.travelMode,\n      waypoints: options.waypoints,\n      unitSystem: options.unitSystem,\n      error: options.error,\n      callback(routes) {\n        if (routes.length === 0) {\n          return;\n        }\n\n        const lastRoute = routes[routes.length - 1];\n\n        // start callback\n        if (options.start) {\n          options.start(lastRoute);\n        }\n\n        // step callback\n        if (options.step) {\n          if (lastRoute.legs.length > 0) {\n            const { steps, } = lastRoute.legs[0];\n\n            steps.forEach((step, index) => {\n              // eslint-disable-next-line no-param-reassign\n              step.step_number = index;\n              // eslint-disable-next-line no-param-reassign\n              step.stepNumber = index;\n\n              options.step(step, steps.length - 1);\n            });\n          }\n        }\n\n        // end callback\n        if (options.end) {\n          options.end(lastRoute);\n        }\n      },\n    });\n  } else if (options.route) {\n    if (options.route.legs.length > 0) {\n      const { steps, } = options.route.legs[0];\n\n      steps.forEach((step, index) => {\n        // eslint-disable-next-line no-param-reassign\n        step.step_number = index;\n        // eslint-disable-next-line no-param-reassign\n        step.stepNumber = index;\n\n        options.step(step, steps.length - 1);\n      });\n    }\n  }\n};\n\n/**\n * Draw and travel a route automatically step by step. It uses the last route found by {@link GMaps#getRoutes}.\n * @function drawSteppedRoute\n *\n * @param {object} options - Accepts the same options as {@link GMaps#travelRoute}.\n * @param {string|google.maps.LatLng|google.maps.Place|google.maps.LatLngLiteral} options.origin - Location of origin.\n * @param {string|google.maps.LatLng|google.maps.Place|google.maps.LatLngLiteral} options.destination - Location of destination.\n * @param {object} options.route - A [google.maps.DirectionsRoute](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRoute) object. If set, `origin` and `destination` are ignored.\n * @param {string} options.strokeColor - Color of the polyline. Can be hexadecimal or CSS name.\n * @param {float} options.strokeOpacity - Opacity of the polyline from 0.0 to 1.0\n * @param {integer} options.strokeWeight - Polyline width in pixels.\n * @param {function} options.start - Fired before the first step. It receives a single argument, which is a [DirectionsRoute](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRoute) object.\n * @param {function} options.step - Fired each step in the route. It receives 2 arguments, which is a [DirectionsStep](https://developers.google.com/maps/documentation/javascript/reference#DirectionsStep) object and the total length of the steps.\n * @param {function} options.end - Fired after the last step. It receives a single argument, which is a [DirectionsRoute](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRoute) object.\n\n */\nGMaps.prototype.drawSteppedRoute = function drawSteppedRoute(options) {\n  const self = this;\n\n  this.travelRoute({\n    ...options,\n    step: function step(routeStep, stepsCount) {\n      const polylineOptions = {\n        path: routeStep.path,\n        strokeColor: options.strokeColor,\n        strokeOpacity: options.strokeOpacity,\n        strokeWeight: options.strokeWeight,\n      };\n\n      if (options.icons) {\n        polylineOptions.icons = options.icons;\n      }\n\n      self.drawPolyline(polylineOptions);\n\n      options.step(routeStep, stepsCount);\n    },\n  });\n\n  // if (options.origin && options.destination) {\n  //   this.getRoutes({\n  //     origin: options.origin,\n  //     destination: options.destination,\n  //     travelMode: options.travelMode,\n  //     waypoints: options.waypoints,\n  //     error: options.error,\n  //     callback(routes) {\n  //       if (routes.length === 0) {\n  //         return;\n  //       }\n\n  //       const route = routes[routes.length - 1];\n\n  //       // start callback\n  //       if (options.start) {\n  //         options.start(route);\n  //       }\n\n  //       // step callback\n  //       if (options.step) {\n  //         if (route.legs.length > 0) {\n  //           const { steps, } = route.legs[0];\n\n  //           steps.forEach((step, index) => {\n  //             // eslint-disable-next-line no-param-reassign\n  //             step.step_number = index;\n  //             // eslint-disable-next-line no-param-reassign\n  //             step.stepNumber = index;\n\n  //             const polylineOptions = {\n  //               path: step.path,\n  //               strokeColor: options.strokeColor,\n  //               strokeOpacity: options.strokeOpacity,\n  //               strokeWeight: options.strokeWeight,\n  //             };\n\n  //             if (options.icons) {\n  //               polylineOptions.icons = options.icons;\n  //             }\n\n  //             self.drawPolyline(polylineOptions);\n  //             options.step(step, (route.legs[0].steps.length - 1));\n  //           });\n  //         }\n  //       }\n\n  //       // end callback\n  //       if (options.end) {\n  //         options.end(route);\n  //       }\n  //     },\n  //   });\n  // } else if (options.route) {\n  //   if (options.route.legs.length > 0) {\n  //     const { steps, } = options.route.legs[0];\n\n  //     steps.forEach((step, index) => {\n  //       // eslint-disable-next-line no-param-reassign\n  //       step.step_number = index;\n  //       // eslint-disable-next-line no-param-reassign\n  //       step.stepNumber = index;\n\n  //       const polylineOptions = {\n  //         path: step.path,\n  //         strokeColor: options.strokeColor,\n  //         strokeOpacity: options.strokeOpacity,\n  //         strokeWeight: options.strokeWeight,\n  //       };\n\n  //       if (options.icons) {\n  //         polylineOptions.icons = options.icons;\n  //       }\n\n  //       self.drawPolyline(polylineOptions);\n\n  //       options.step(step);\n  //     });\n  //   }\n  // }\n};\n\nclass Route {\n  constructor(options) {\n    this.origin = options.origin;\n    this.destination = options.destination;\n    this.waypoints = options.waypoints;\n\n    this.map = options.map;\n    this.route = options.route;\n    this.step_count = 0;\n    this.steps = this.route.legs[0].steps;\n    this.steps_length = this.steps.length;\n\n    const polylineOptions = {\n      path: new google.maps.MVCArray(),\n      strokeColor: options.strokeColor,\n      strokeOpacity: options.strokeOpacity,\n      strokeWeight: options.strokeWeight,\n    };\n\n    if (options.icons) {\n      polylineOptions.icons = options.icons;\n    }\n\n    this.polyline = this.map.drawPolyline(polylineOptions).getPath();\n  }\n\n  getRoute(options) {\n    const self = this;\n\n    this.map.getRoutes({\n      origin: this.origin,\n      destination: this.destination,\n      travelMode: options.travelMode,\n      waypoints: this.waypoints || [],\n      error: options.error,\n      callback(routes) {\n        // eslint-disable-next-line prefer-destructuring\n        self.route = routes[0];\n\n        if (options.callback) {\n          options.callback.call(self);\n        }\n      },\n    });\n  }\n\n  back() {\n    if (this.step_count > 0) {\n      this.step_count -= 1;\n      const { path, } = this.route.legs[0].steps[this.step_count];\n\n      path.forEach(() => this.polyline.pop());\n    }\n  }\n\n  forward() {\n    if (this.step_count < this.steps_length) {\n      const { path, } = this.route.legs[0].steps[this.step_count];\n\n      path.forEach(coordinate => this.polyline.push(coordinate));\n\n      this.step_count += 1;\n    }\n  }\n}\n\nGMaps.Route = Route;\n\nexport default GMaps;\n","import GMaps from './core';\n\nconst parseColor = (color, opacity) => {\n  let parsedColor;\n\n  if (color[0] === '#') {\n    parsedColor = color.replace('#', '0x');\n\n    if (opacity) {\n      // eslint-disable-next-line no-param-reassign\n      opacity = Math.min(1, Math.max(parseFloat(opacity), 0));\n\n      if (opacity === 0) {\n        return '0x00000000';\n      }\n\n      // eslint-disable-next-line no-param-reassign\n      opacity = (opacity * 255).toString(16);\n\n      if (opacity.length === 1) {\n        // eslint-disable-next-line no-param-reassign\n        opacity += opacity;\n      }\n\n      parsedColor = parsedColor.slice(0, 8) + opacity;\n    }\n  }\n\n  return parsedColor;\n};\n\n/**\n * Extends GMaps to generate static maps.\n * @module Static\n */\n\n/**\n * Creates an URL for a static map from current GMaps map.\n * @function toImage\n *\n * @param {object} options - The `options` object should contain:\n * @param {array} options.size - Width and height of the image.\n *\n * @returns {string}\n */\nGMaps.prototype.toImage = function toImage(options = {}) {\n  const { size = [this.element.clientWidth, this.element.clientHeight], zoom = this.getZoom(), } = options;\n\n  const staticMapOptions = {\n    size,\n    zoom,\n    latitude: this.getCenter().lat(),\n    longitude: this.getCenter().lng(),\n    markers: this.markers.map(marker => ({\n      latitude: marker.getPosition().lat(),\n      longitude: marker.getPosition().lng(),\n    })),\n  };\n\n  if (this.polylines.length > 0) {\n    const polyline = this.polylines[0];\n\n    staticMapOptions.polyline = {\n      path: google.maps.geometry.encoding.encodePath(polyline.getPath()),\n      strokeColor: polyline.strokeColor,\n      strokeOpacity: polyline.strokeOpacity,\n      strokeWeight: polyline.strokeWeight,\n    };\n  }\n\n  return GMaps.staticMapURL(staticMapOptions);\n};\n\nconst buildMarkerParameters = (marker) => {\n  const markerParameters = [];\n\n  const { address, lat, latitude = lat, lng, longitude = lng, size, icon, color, label, ...markerOptions } = marker;\n\n  const location = address || `${latitude},${longitude}`;\n\n  if (size) {\n    markerParameters.push(`size:${size}`);\n  }\n\n  if (icon) {\n    markerParameters.push(`icon:${encodeURI(icon)}`);\n  }\n\n  if (color) {\n    markerParameters.push(`color:${color.replace('#', '0x')}`);\n  }\n\n  if (label) {\n    markerParameters.push(`label:${label[0].toUpperCase()}`);\n  }\n\n  Object.keys(markerOptions).forEach(key => markerParameters.push(`${key}:${markerParameters[key]}`));\n\n  markerParameters.push(location);\n\n  return markerParameters;\n};\n\nconst buildPathParameters = (polyline) => {\n  const { path, } = polyline;\n  const polylineParameters = [];\n\n  if (polyline.strokeWeight) {\n    polylineParameters.push(`weight:${parseInt(polyline.strokeWeight, 10)}`);\n  }\n\n  if (polyline.strokeColor) {\n    polylineParameters.push(`color:${parseColor(polyline.strokeColor, polyline.strokeOpacity)}`);\n  }\n\n  if (polyline.fillColor) {\n    polylineParameters.push(`fillcolor:${parseColor(polyline.fillColor, polyline.fillOpacity)}`);\n  }\n\n  if (path.join) {\n    path.forEach(coordinates => polylineParameters.push(coordinates.join(',')));\n  } else {\n    polylineParameters.push(`enc:${path}`);\n  }\n\n  return polylineParameters;\n};\n\nconst buildStyleParameters = (style) => {\n  const styleParameters = [];\n\n  if (style.featureType) {\n    styleParameters.push(`feature:${style.featureType.toLowerCase()}`);\n  }\n\n  if (style.elementType) {\n    styleParameters.push(`element:${style.elementType.toLowerCase()}`);\n  }\n\n  if (style.stylers.length) {\n    style.stylers.forEach((styler) => {\n      Object.keys(styler).forEach((key) => {\n        const value = (key === 'hue' || key === 'color') ? styler[key].replace('#', '0x') : styler[key];\n\n        styleParameters.push(`${key}:${value}`);\n      });\n    });\n  }\n\n  return styleParameters;\n};\n\nGMaps.staticMapURL = function staticMapURL(baseOptions) {\n  const { url, lat, latitude = lat, lng, longitude = lng, center, address, zoom = 15, markers = [], styles, polyline, visible, size = [630, 300], ...options } = baseOptions;\n  const defaultRoot = `${window.location.protocol === 'file:' ? 'http:' : window.location.protocol}//maps.googleapis.com/maps/api/staticmap`;\n\n  let root = url || defaultRoot;\n  const parameters = [];\n\n  root += '?';\n\n  // Map options\n  if (center) {\n    parameters.push(`center=${center}`);\n  } else if (address) {\n    parameters.push(`center=${address}`);\n  } else if (latitude && longitude) {\n    parameters.push(`center=${latitude},${longitude}`);\n  } else if (visible) {\n    parameters.push(`visible=${encodeURI(visible.join('|'))}`);\n  }\n\n  parameters.push(`size=${size.join('x')}`);\n  parameters.push(`zoom=${zoom}`);\n\n  Object.keys(options).forEach(key => parameters.push(`${key}=${options[key]}`));\n\n  // Map style\n  if (styles) {\n    styles.forEach((style) => {\n      const styleParameters = buildStyleParameters(style);\n\n      parameters.push(`style=${encodeURI(styleParameters.join('|'))}`);\n    });\n  }\n\n  // Markers\n  if (markers.length) {\n    markers.forEach((marker) => {\n      const markerParameters = buildMarkerParameters(marker);\n      parameters.push(`markers=${encodeURI(markerParameters.join('|'))}`);\n    });\n  }\n\n  // Polylines\n  if (polyline) {\n    const polylineParameters = buildPathParameters(polyline);\n\n    parameters.push(`path=${encodeURI(polylineParameters.join('|'))}`);\n  }\n\n  // Retina support\n  const dpi = window.devicePixelRatio || 1;\n  parameters.push(`scale=${dpi}`);\n\n  return root + parameters.join('&');\n};\n\nexport default GMaps;\n","import GMaps from './core';\nimport './events';\n\n/**\n * Extends GMaps to use custom Map Types.\n * @module MapTypes\n */\n\n/**\n * Draw a custom [tile-based map type](https://developers.google.com/maps/documentation/javascript/maptypes#ImageMapTypes) in the Map, which can be used with the base map types (`hybrid`, `roadmap`, `satellite` and `terrain`).\n * @function addMapType\n *\n * @param {string} mapTypeId - A simple identifier for the custom map type.\n * @param {object} options - The `options` object should contain:\n * @param {function} options.getTileUrl - A function that returns an URL for tile-based endpoints. It receives two arguments:\n *   * `points` (google.maps.Point): a point with `x` and `y` (is not a coordinate).\n *   * `zoom` (number): a zoom level.\n * @param {google.maps.Size} options.tileSize - The size of the tile.\n *\n * @returns {google.maps.ImageMapType}\n */\nGMaps.prototype.addMapType = function addMapType(mapTypeId, options = {}) {\n  const { getTileUrl, tileSize = new google.maps.Size(256, 256), } = options;\n\n  if (typeof getTileUrl !== 'function') {\n    throw new Error(\"'getTileUrl' function required.\");\n  }\n\n  const mapType = new google.maps.ImageMapType({ getTileUrl, tileSize, });\n\n  this.map.mapTypes.set(mapTypeId, mapType);\n\n  return mapType;\n};\n\n/**\n * Draw a custom [overlay map type](https://developers.google.com/maps/documentation/javascript/maptypes#OverlayMapTypes) in the Map. This method also fires an `overlay_map_type_added` event.\n * @function addOverlayMapType\n *\n * @param {string} mapTypeId - A simple identifier for the custom map type.\n * @param {object} options - The `options` object should contain:\n * @param {function} options.getTile - A function that returns a DOM Node. It receives three arguments:\n *   * `points` (google.maps.Point): a point with `x` and `y` (is not a coordinate).\n *   * `zoom` (number): a zoom level.\n *   * `ownerDocument` (Document): The DOM document that will create the node.\n * @param {number} options.index - The index for the overlay map type. Used to set differente z levels on stacked overlay maps.\n * @param {google.maps.Size} options.tileSize - The size of the tile.\n *\n * @see `options` also accepts any option defined in the [official documentation](https://developers.google.com/maps/documentation/javascript/reference#MapType).\n */\nGMaps.prototype.addOverlayMapType = function addOverlayMapType(options = {}) {\n  const { getTile, index = this.map.overlayMapTypes.length, ...overlayMapTypeOptions } = options;\n\n  if (typeof getTile !== 'function') {\n    throw new Error(\"'getTile' function required.\");\n  }\n\n  this.map.overlayMapTypes.insertAt(index, { ...overlayMapTypeOptions, getTile, });\n  GMaps.fire('overlay_map_type_added', this.map.overlayMapTypes[index], this);\n};\n\n/**\n * Remove a overlay map type from the map. This method also fires an `overlay_map_type_removed` event.\n * @function removeOverlayMapType\n *\n * @param {google.maps.Polyline} polyline - The polyline to be removed.\n */\nGMaps.prototype.removeOverlayMapType = function removeOverlayMapType(index) {\n  const overlayMapType = this.map.overlayMapTypes[index];\n\n  this.map.overlayMapTypes.removeAt(index);\n  GMaps.fire('overlay_map_type_removed', overlayMapType, this);\n};\n\nexport default GMaps;\n","import GMaps from './core';\n\n/**\n * Extends GMaps to add styled map types.\n * @module Styles\n */\n\n/**\n * Add a [styled map type](https://developers.google.com/maps/documentation/javascript/maptypes#StyledMaps) in the Map, which can be used with the base map types (`hybrid`, `roadmap`, `satellite` and `terrain`).\n * @function addStyle\n *\n * @param {object} options - The `options` object should contain:\n * @param {string} options.mapTypeId - A simple identifier for the styled map type.\n * @param {string} options.styledMapName - A name for the styled map type. It will be displayed in the map type control.\n * @param {array} options.styles - An array of [`MapTypeStyle`](https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyle) objects.\n */\nGMaps.prototype.addStyle = function addStyle(options) {\n  const styledMapType = new google.maps.StyledMapType(options.styles, { name: options.styledMapName, });\n\n  this.map.mapTypes.set(options.mapTypeId, styledMapType);\n};\n\n/**\n * Set a [styled map type](https://developers.google.com/maps/documentation/javascript/maptypes#StyledMaps) to the Map. The map type should be defined before with {@link GMaps#addStyle}.\n * @function setStyle\n *\n * @param {string} mapTypeId - The styled map type's identifier.\n */\nGMaps.prototype.setStyle = function setStyle(mapTypeId) {\n  this.map.setMapTypeId(mapTypeId);\n};\n\nexport default GMaps;\n","import GMaps, { getElementById, setupEvents } from './core';\n\n/**\n * Extends GMaps to use StreetView panoramas\n * @module StreetView\n */\n\nconst STREETVIEW_EVENTS = ['closeclick', 'links_changed', 'pano_changed', 'position_changed', 'pov_changed', 'resize', 'visible_changed'];\n\n/**\n * Display a Street View Panorama for a position.\n * @function createPanorama\n *\n * @param {object} options - The `options` object should contain:\n * @param {number} options.latitude - Latitude of the coordinate where the panorama is placed. If not set, it takes the Map's center.\n * @param {number} options.longitude - Longitude of the coordinate where the panorama is placed. If not set, it takes the Map's center.\n * @param {google.maps.LatLng} options.position - A `google.maps.LatLng` coordinate where the panorama is placed. If set, `latitude` and `longitude` are ignored.\n *\n * @see `options` also accepts any option defined in the [official documentation](https://developers.google.com/maps/documentation/javascript/reference#StreetViewPanoramaOptions) and any event defined in the [\"Events\" section](https://developers.google.com/maps/documentation/javascript/reference#StreetViewPanorama).\n *\n * @returns {google.maps.StreetViewPanorama}\n */\nGMaps.prototype.createPanorama = function createPanorama(baseOptions) {\n  const { lat = this.getCenter().lat(), latitude = lat, lng = this.getCenter().lng(), longitude = lng, ...options } = baseOptions;\n\n  const streetViewOptions = {\n    latitude,\n    longitude,\n    instance: this,\n    ...options,\n  };\n\n  this.panorama = GMaps.createPanorama(streetViewOptions);\n\n  this.map.setStreetView(this.panorama);\n\n  return this.panorama;\n};\n\nGMaps.createPanorama = function createPanorama(baseOptions) {\n  const {\n    el,\n    element = el,\n    context,\n    lat,\n    latitude = lat,\n    lng,\n    longitude = lng,\n    position = new google.maps.LatLng(latitude, longitude),\n    instance = window,\n    ...options\n  } = baseOptions;\n\n  const containerElement = getElementById(element, context);\n\n  const filteredOptions = Object.keys(options).reduce((hash, key) => {\n    if (STREETVIEW_EVENTS.includes(key)) {\n      return hash;\n    }\n\n    return { ...hash, [key]: options[key], };\n  }, {});\n\n  const streetViewOptions = {\n    ...filteredOptions,\n    position,\n    visible: true,\n  };\n\n  const panorama = new google.maps.StreetViewPanorama(containerElement, streetViewOptions);\n\n  setupEvents({ events: STREETVIEW_EVENTS, object: panorama, instance, handlers: options, });\n\n  return panorama;\n};\n\nexport default GMaps;\n","import GMaps from './core';\n\n/**\n * Extends GMaps to add utils functions.\n * @module Utils\n */\n\n/**\n * Geolocate using browser's Web API.\n * @function geolocate\n * @static\n *\n * @param {object} options - The `options` object should contain:\n * @param {function} options.always - A callback that will be executed after the `success`, `error` and `not_supported` callbacks.\n * @param {function} options.success - A callback that will be executed after the browser find its geolocation.\n * @param {function} options.error - A callback that will be executed after the browser fails at finding its geolocation.\n * @param {function} options.not_supported - A callback that will be executed if the browser doesn't support geolocation.\n * @param {object} options.options - Object with all options defined in [PositionOptions](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions).\n */\nGMaps.geolocate = function geolocate(options) {\n  const completeCallback = options.always || options.complete;\n\n  if (window.navigator.geolocation) {\n    window.navigator.geolocation.getCurrentPosition((position) => {\n      if (options.success) {\n        options.success(position);\n      }\n\n      if (completeCallback) {\n        completeCallback();\n      }\n    }, (error) => {\n      if (options.error) {\n        options.error(error);\n      }\n\n      if (completeCallback) {\n        completeCallback();\n      }\n    }, options.options);\n  } else {\n    if (options.not_supported) {\n      options.not_supported();\n    }\n\n    if (completeCallback) {\n      completeCallback();\n    }\n  }\n};\n\n/**\n * Geocode using Google Maps Geocoding service.\n * @function geocode\n * @static\n *\n * @param {object} options - The `options` object should contain:\n * @param {number} options.latitude - Latitude of the coordinate to geocode. If `latitude` and `longitude` are set, `location` is ignored.\n * @param {number} options.longitude - Longitude of the coordinate to geocode. If `latitude` and `longitude` are set, `location` is ignored.\n * @param {google.maps.LatLng} options.location - A `google.maps.LatLng` coordinate to geocode. If set, `latitude` and `longitude` are ignored.\n * @param {function} options.callback - Function that will be executed after the results are returned. It receives 2 arguments, which is an array of [GeocoderResult](https://developers.google.com/maps/documentation/javascript/reference#GeocoderResult) objects and the [request's status](https://developers.google.com/maps/documentation/javascript/reference#GeocoderStatus).\n *\n * @see `options` also accepts any option defined in the [official documentation](https://developers.google.com/maps/documentation/javascript/reference#GeocoderRequest).\n *\n */\nGMaps.geocode = function geocode(baseOptions) {\n  const {\n    callback,\n    lat,\n    latitude = lat,\n    lng,\n    longitude = lng,\n    location = new google.maps.LatLng(latitude, longitude),\n    ...options\n  } = baseOptions;\n\n  this.geocoder = new google.maps.Geocoder();\n\n  const geocodeOptions = {\n    ...options,\n    location,\n  };\n\n  this.geocoder.geocode(geocodeOptions, callback);\n};\n\nexport default GMaps;\n","import GMaps from './core';\nimport './events';\nimport './controls';\nimport './geofences';\nimport './markers';\nimport './overlays';\nimport './geometry';\nimport './layers';\nimport './routes';\nimport './static';\nimport './map_types';\nimport './styles';\nimport './streetview';\nimport './polyfills';\nimport './utils';\n\nexport default GMaps;\n"],"sourceRoot":""}